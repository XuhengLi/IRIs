type token =
  | COMMA
  | LPAR
  | RPAR
  | LSQR
  | RSQR
  | IF
  | ELIF
  | ENDIF
  | ELSE
  | ENDFUN
  | NEWLINE
  | WHILE
  | ENDLOOP
  | BREAK
  | CONTINUE
  | TRUE
  | FALSE
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | MOD
  | EQ
  | NEQ
  | LEQ
  | GEQ
  | LT
  | GT
  | OR
  | AND
  | NOT
  | EOF
  | PIPE
  | RETURN
  | TYPE of (string)
  | ID of (string)
  | STRING of (string)
  | INT of (int)
  | FLOAT of (float)
  | BOOL of (bool)

open Parsing;;
let _ = parse_error;;
# 2 "parser.mly"
open Ast
# 48 "parser.ml"
let yytransl_const = [|
  257 (* COMMA *);
  258 (* LPAR *);
  259 (* RPAR *);
  260 (* LSQR *);
  261 (* RSQR *);
  262 (* IF *);
  263 (* ELIF *);
  264 (* ENDIF *);
  265 (* ELSE *);
  266 (* ENDFUN *);
  267 (* NEWLINE *);
  268 (* WHILE *);
  269 (* ENDLOOP *);
  270 (* BREAK *);
  271 (* CONTINUE *);
  272 (* TRUE *);
  273 (* FALSE *);
  274 (* PLUS *);
  275 (* MINUS *);
  276 (* TIMES *);
  277 (* DIVIDE *);
  278 (* MOD *);
  279 (* EQ *);
  280 (* NEQ *);
  281 (* LEQ *);
  282 (* GEQ *);
  283 (* LT *);
  284 (* GT *);
  285 (* OR *);
  286 (* AND *);
  287 (* NOT *);
    0 (* EOF *);
  288 (* PIPE *);
  289 (* RETURN *);
    0|]

let yytransl_block = [|
  290 (* TYPE *);
  291 (* ID *);
  292 (* STRING *);
  293 (* INT *);
  294 (* FLOAT *);
  295 (* BOOL *);
    0|]

let yylhs = "\255\255\
\001\000\001\000\002\000\003\000\003\000\005\000\005\000\004\000\
\004\000\006\000\006\000\006\000\006\000\006\000\008\000\008\000\
\009\000\009\000\007\000\007\000\007\000\007\000\007\000\007\000\
\007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
\007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
\007\000\007\000\010\000\010\000\011\000\011\000\000\000"

let yylen = "\002\000\
\000\000\002\000\007\000\000\000\001\000\002\000\004\000\000\000\
\002\000\002\000\003\000\008\000\006\000\003\000\001\000\003\000\
\001\000\003\000\001\000\001\000\001\000\001\000\001\000\004\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\002\000\002\000\003\000\004\000\
\004\000\003\000\000\000\001\000\001\000\003\000\002\000"

let yydefred = "\000\000\
\001\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\
\000\000\005\000\000\000\008\000\000\000\000\000\007\000\000\000\
\000\000\003\000\000\000\000\000\000\000\000\000\000\000\000\000\
\019\000\021\000\020\000\022\000\009\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\010\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\042\000\000\000\000\000\011\000\000\000\000\000\000\000\014\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\024\000\016\000\041\000\000\000\
\040\000\000\000\000\000\018\000\000\000\000\000\013\000\000\000\
\012\000"

let yydgoto = "\002\000\
\003\000\005\000\009\000\014\000\010\000\029\000\030\000\040\000\
\062\000\066\000\067\000"

let yysindex = "\002\000\
\000\000\000\000\230\254\236\254\000\000\025\255\010\255\013\255\
\042\255\000\000\048\255\000\000\010\255\040\255\000\000\062\255\
\041\255\000\000\049\255\062\255\062\255\062\255\012\255\052\255\
\000\000\000\000\000\000\000\000\000\000\024\001\054\255\193\000\
\062\255\062\255\003\255\056\255\051\001\062\255\055\255\044\255\
\062\255\062\255\000\000\062\255\062\255\062\255\062\255\062\255\
\062\255\062\255\062\255\062\255\062\255\062\255\062\255\062\255\
\000\000\223\000\253\000\000\000\221\255\057\255\026\255\000\000\
\098\001\063\255\064\255\080\001\003\255\003\255\056\255\056\255\
\149\255\149\255\179\255\179\255\179\255\179\255\129\001\211\000\
\116\001\051\255\051\255\062\255\000\000\000\000\000\000\062\255\
\000\000\058\255\067\255\000\000\098\001\051\255\000\000\061\255\
\000\000"

let yyrindex = "\000\000\
\000\000\000\000\083\000\000\000\000\000\000\000\088\255\000\000\
\000\000\000\000\089\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\101\255\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\251\255\131\255\000\000\000\000\083\255\000\000\
\092\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\098\255\000\000\000\000\000\000\
\008\255\000\000\105\255\000\000\025\000\055\000\161\255\191\255\
\148\000\178\000\066\000\096\000\107\000\137\000\106\255\202\255\
\009\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\018\255\000\000\000\000\000\000\
\000\000"

let yygindex = "\000\000\
\000\000\000\000\000\000\000\000\097\000\175\255\240\255\050\000\
\030\000\000\000\000\000"

let yytablesize = 671
let yytable = "\032\000\
\090\000\091\000\001\000\035\000\036\000\037\000\042\000\004\000\
\045\000\039\000\045\000\039\000\096\000\039\000\006\000\038\000\
\058\000\059\000\046\000\039\000\046\000\061\000\046\000\047\000\
\065\000\068\000\007\000\069\000\070\000\071\000\072\000\073\000\
\074\000\075\000\076\000\077\000\078\000\079\000\080\000\081\000\
\039\000\016\000\033\000\008\000\012\000\017\000\039\000\011\000\
\013\000\018\000\034\000\019\000\016\000\041\000\064\000\063\000\
\017\000\038\000\020\000\042\000\039\000\085\000\019\000\016\000\
\088\000\087\000\094\000\061\000\097\000\020\000\021\000\093\000\
\022\000\023\000\024\000\025\000\026\000\027\000\028\000\095\000\
\020\000\021\000\047\000\022\000\023\000\024\000\025\000\026\000\
\027\000\028\000\004\000\006\000\021\000\015\000\043\000\031\000\
\024\000\025\000\026\000\027\000\028\000\023\000\017\000\023\000\
\023\000\023\000\036\000\044\000\036\000\015\000\036\000\023\000\
\086\000\092\000\000\000\000\000\036\000\000\000\023\000\023\000\
\023\000\023\000\000\000\023\000\023\000\023\000\023\000\023\000\
\023\000\023\000\023\000\038\000\023\000\038\000\036\000\038\000\
\000\000\036\000\000\000\000\000\000\000\038\000\000\000\000\000\
\000\000\000\000\000\000\000\000\038\000\038\000\038\000\038\000\
\042\000\038\000\038\000\038\000\038\000\038\000\038\000\038\000\
\038\000\027\000\038\000\027\000\000\000\027\000\044\000\045\000\
\046\000\047\000\000\000\027\000\000\000\050\000\051\000\052\000\
\053\000\000\000\027\000\027\000\027\000\027\000\042\000\027\000\
\027\000\027\000\027\000\027\000\027\000\027\000\027\000\028\000\
\027\000\028\000\000\000\028\000\044\000\045\000\046\000\047\000\
\000\000\028\000\035\000\000\000\035\000\000\000\035\000\000\000\
\028\000\028\000\028\000\028\000\035\000\028\000\028\000\028\000\
\028\000\028\000\028\000\028\000\028\000\084\000\028\000\000\000\
\042\000\000\000\000\000\000\000\000\000\000\000\035\000\035\000\
\000\000\035\000\000\000\000\000\000\000\000\000\044\000\045\000\
\046\000\047\000\000\000\048\000\049\000\050\000\051\000\052\000\
\053\000\054\000\055\000\037\000\056\000\037\000\000\000\037\000\
\000\000\000\000\000\000\000\000\000\000\037\000\000\000\000\000\
\000\000\000\000\000\000\000\000\037\000\037\000\000\000\000\000\
\000\000\037\000\037\000\037\000\037\000\037\000\037\000\037\000\
\037\000\025\000\037\000\025\000\000\000\025\000\000\000\000\000\
\000\000\000\000\000\000\025\000\000\000\000\000\000\000\000\000\
\000\000\000\000\025\000\025\000\000\000\000\000\000\000\025\000\
\025\000\025\000\025\000\025\000\025\000\025\000\025\000\026\000\
\025\000\026\000\000\000\026\000\000\000\000\000\000\000\000\000\
\000\000\026\000\032\000\000\000\032\000\000\000\032\000\000\000\
\026\000\026\000\000\000\000\000\032\000\026\000\026\000\026\000\
\026\000\026\000\026\000\026\000\026\000\000\000\026\000\000\000\
\032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
\034\000\032\000\034\000\000\000\034\000\000\000\000\000\000\000\
\000\000\000\000\034\000\031\000\000\000\031\000\000\000\031\000\
\000\000\000\000\000\000\000\000\000\000\031\000\034\000\034\000\
\034\000\034\000\034\000\034\000\034\000\034\000\000\000\034\000\
\000\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\
\031\000\033\000\031\000\033\000\000\000\033\000\000\000\000\000\
\000\000\000\000\000\000\033\000\029\000\000\000\029\000\000\000\
\029\000\000\000\000\000\000\000\000\000\000\000\029\000\033\000\
\033\000\033\000\033\000\033\000\033\000\033\000\033\000\000\000\
\033\000\000\000\029\000\029\000\000\000\000\000\000\000\000\000\
\029\000\029\000\030\000\029\000\030\000\000\000\030\000\000\000\
\000\000\000\000\000\000\000\000\030\000\000\000\000\000\000\000\
\000\000\000\000\000\000\057\000\042\000\000\000\000\000\000\000\
\030\000\030\000\000\000\000\000\000\000\000\000\030\000\030\000\
\000\000\030\000\044\000\045\000\046\000\047\000\042\000\048\000\
\049\000\050\000\051\000\052\000\053\000\054\000\055\000\000\000\
\056\000\082\000\042\000\000\000\044\000\045\000\046\000\047\000\
\000\000\048\000\049\000\050\000\051\000\052\000\053\000\000\000\
\044\000\045\000\046\000\047\000\000\000\048\000\049\000\050\000\
\051\000\052\000\053\000\054\000\055\000\000\000\056\000\083\000\
\042\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\044\000\045\000\
\046\000\047\000\000\000\048\000\049\000\050\000\051\000\052\000\
\053\000\054\000\055\000\042\000\056\000\000\000\000\000\000\000\
\000\000\000\000\043\000\000\000\000\000\000\000\000\000\000\000\
\000\000\044\000\045\000\046\000\047\000\000\000\048\000\049\000\
\050\000\051\000\052\000\053\000\054\000\055\000\042\000\056\000\
\000\000\000\000\000\000\000\000\000\000\060\000\000\000\000\000\
\000\000\000\000\000\000\000\000\044\000\045\000\046\000\047\000\
\000\000\048\000\049\000\050\000\051\000\052\000\053\000\054\000\
\055\000\000\000\056\000\042\000\089\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\044\000\045\000\046\000\047\000\042\000\048\000\049\000\
\050\000\051\000\052\000\053\000\054\000\055\000\000\000\056\000\
\000\000\000\000\000\000\044\000\045\000\046\000\047\000\042\000\
\048\000\049\000\050\000\051\000\052\000\053\000\054\000\055\000\
\000\000\056\000\000\000\000\000\042\000\044\000\045\000\046\000\
\047\000\000\000\048\000\049\000\050\000\051\000\052\000\053\000\
\054\000\055\000\044\000\045\000\046\000\047\000\000\000\048\000\
\049\000\050\000\051\000\052\000\053\000\000\000\055\000"

let yycheck = "\016\000\
\082\000\083\000\001\000\020\000\021\000\022\000\004\001\034\001\
\001\001\001\001\003\001\003\001\094\000\005\001\035\001\004\001\
\033\000\034\000\001\001\011\001\003\001\038\000\020\001\021\001\
\041\000\042\000\002\001\044\000\045\000\046\000\047\000\048\000\
\049\000\050\000\051\000\052\000\053\000\054\000\055\000\056\000\
\032\001\002\001\002\001\034\001\003\001\006\001\035\001\035\001\
\001\001\010\001\002\001\012\001\002\001\002\001\011\001\001\001\
\006\001\004\001\019\001\004\001\035\001\005\001\012\001\002\001\
\001\001\003\001\009\001\084\000\008\001\019\001\031\001\088\000\
\033\001\034\001\035\001\036\001\037\001\038\001\039\001\013\001\
\019\001\031\001\000\000\033\001\034\001\035\001\036\001\037\001\
\038\001\039\001\003\001\003\001\031\001\011\001\003\001\034\001\
\035\001\036\001\037\001\038\001\039\001\001\001\005\001\003\001\
\004\001\005\001\001\001\003\001\003\001\013\000\005\001\011\001\
\063\000\084\000\255\255\255\255\011\001\255\255\018\001\019\001\
\020\001\021\001\255\255\023\001\024\001\025\001\026\001\027\001\
\028\001\029\001\030\001\001\001\032\001\003\001\029\001\005\001\
\255\255\032\001\255\255\255\255\255\255\011\001\255\255\255\255\
\255\255\255\255\255\255\255\255\018\001\019\001\020\001\021\001\
\004\001\023\001\024\001\025\001\026\001\027\001\028\001\029\001\
\030\001\001\001\032\001\003\001\255\255\005\001\018\001\019\001\
\020\001\021\001\255\255\011\001\255\255\025\001\026\001\027\001\
\028\001\255\255\018\001\019\001\020\001\021\001\004\001\023\001\
\024\001\025\001\026\001\027\001\028\001\029\001\030\001\001\001\
\032\001\003\001\255\255\005\001\018\001\019\001\020\001\021\001\
\255\255\011\001\001\001\255\255\003\001\255\255\005\001\255\255\
\018\001\019\001\020\001\021\001\011\001\023\001\024\001\025\001\
\026\001\027\001\028\001\029\001\030\001\001\001\032\001\255\255\
\004\001\255\255\255\255\255\255\255\255\255\255\029\001\030\001\
\255\255\032\001\255\255\255\255\255\255\255\255\018\001\019\001\
\020\001\021\001\255\255\023\001\024\001\025\001\026\001\027\001\
\028\001\029\001\030\001\001\001\032\001\003\001\255\255\005\001\
\255\255\255\255\255\255\255\255\255\255\011\001\255\255\255\255\
\255\255\255\255\255\255\255\255\018\001\019\001\255\255\255\255\
\255\255\023\001\024\001\025\001\026\001\027\001\028\001\029\001\
\030\001\001\001\032\001\003\001\255\255\005\001\255\255\255\255\
\255\255\255\255\255\255\011\001\255\255\255\255\255\255\255\255\
\255\255\255\255\018\001\019\001\255\255\255\255\255\255\023\001\
\024\001\025\001\026\001\027\001\028\001\029\001\030\001\001\001\
\032\001\003\001\255\255\005\001\255\255\255\255\255\255\255\255\
\255\255\011\001\001\001\255\255\003\001\255\255\005\001\255\255\
\018\001\019\001\255\255\255\255\011\001\023\001\024\001\025\001\
\026\001\027\001\028\001\029\001\030\001\255\255\032\001\255\255\
\023\001\024\001\025\001\026\001\027\001\028\001\029\001\030\001\
\001\001\032\001\003\001\255\255\005\001\255\255\255\255\255\255\
\255\255\255\255\011\001\001\001\255\255\003\001\255\255\005\001\
\255\255\255\255\255\255\255\255\255\255\011\001\023\001\024\001\
\025\001\026\001\027\001\028\001\029\001\030\001\255\255\032\001\
\255\255\023\001\024\001\025\001\026\001\027\001\028\001\029\001\
\030\001\001\001\032\001\003\001\255\255\005\001\255\255\255\255\
\255\255\255\255\255\255\011\001\001\001\255\255\003\001\255\255\
\005\001\255\255\255\255\255\255\255\255\255\255\011\001\023\001\
\024\001\025\001\026\001\027\001\028\001\029\001\030\001\255\255\
\032\001\255\255\023\001\024\001\255\255\255\255\255\255\255\255\
\029\001\030\001\001\001\032\001\003\001\255\255\005\001\255\255\
\255\255\255\255\255\255\255\255\011\001\255\255\255\255\255\255\
\255\255\255\255\255\255\003\001\004\001\255\255\255\255\255\255\
\023\001\024\001\255\255\255\255\255\255\255\255\029\001\030\001\
\255\255\032\001\018\001\019\001\020\001\021\001\004\001\023\001\
\024\001\025\001\026\001\027\001\028\001\029\001\030\001\255\255\
\032\001\003\001\004\001\255\255\018\001\019\001\020\001\021\001\
\255\255\023\001\024\001\025\001\026\001\027\001\028\001\255\255\
\018\001\019\001\020\001\021\001\255\255\023\001\024\001\025\001\
\026\001\027\001\028\001\029\001\030\001\255\255\032\001\003\001\
\004\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\018\001\019\001\
\020\001\021\001\255\255\023\001\024\001\025\001\026\001\027\001\
\028\001\029\001\030\001\004\001\032\001\255\255\255\255\255\255\
\255\255\255\255\011\001\255\255\255\255\255\255\255\255\255\255\
\255\255\018\001\019\001\020\001\021\001\255\255\023\001\024\001\
\025\001\026\001\027\001\028\001\029\001\030\001\004\001\032\001\
\255\255\255\255\255\255\255\255\255\255\011\001\255\255\255\255\
\255\255\255\255\255\255\255\255\018\001\019\001\020\001\021\001\
\255\255\023\001\024\001\025\001\026\001\027\001\028\001\029\001\
\030\001\255\255\032\001\004\001\005\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\018\001\019\001\020\001\021\001\004\001\023\001\024\001\
\025\001\026\001\027\001\028\001\029\001\030\001\255\255\032\001\
\255\255\255\255\255\255\018\001\019\001\020\001\021\001\004\001\
\023\001\024\001\025\001\026\001\027\001\028\001\029\001\030\001\
\255\255\032\001\255\255\255\255\004\001\018\001\019\001\020\001\
\021\001\255\255\023\001\024\001\025\001\026\001\027\001\028\001\
\029\001\030\001\018\001\019\001\020\001\021\001\255\255\023\001\
\024\001\025\001\026\001\027\001\028\001\255\255\030\001"

let yynames_const = "\
  COMMA\000\
  LPAR\000\
  RPAR\000\
  LSQR\000\
  RSQR\000\
  IF\000\
  ELIF\000\
  ENDIF\000\
  ELSE\000\
  ENDFUN\000\
  NEWLINE\000\
  WHILE\000\
  ENDLOOP\000\
  BREAK\000\
  CONTINUE\000\
  TRUE\000\
  FALSE\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIVIDE\000\
  MOD\000\
  EQ\000\
  NEQ\000\
  LEQ\000\
  GEQ\000\
  LT\000\
  GT\000\
  OR\000\
  AND\000\
  NOT\000\
  EOF\000\
  PIPE\000\
  RETURN\000\
  "

let yynames_block = "\
  TYPE\000\
  ID\000\
  STRING\000\
  INT\000\
  FLOAT\000\
  BOOL\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    Obj.repr(
# 37 "parser.mly"
    ( [], [] )
# 389 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Ast.program) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'fdecl) in
    Obj.repr(
# 39 "parser.mly"
                       ( fst _1, (_2 :: snd _1) )
# 397 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'param) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 44 "parser.mly"
    ( { ftyp = _1;
        fname = _2;
        params = _4;
        body = List.rev _6 } )
# 410 "parser.ml"
               : 'fdecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 50 "parser.mly"
                    ( [] )
# 416 "parser.ml"
               : 'param))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'param_list) in
    Obj.repr(
# 51 "parser.mly"
                    ( _1 )
# 423 "parser.ml"
               : 'param))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 54 "parser.mly"
                                 ([(_1, _2)])
# 431 "parser.ml"
               : 'param_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'param_list) in
    Obj.repr(
# 55 "parser.mly"
                                 ((_1, _2) :: _4)
# 440 "parser.ml"
               : 'param_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 62 "parser.mly"
    ([])
# 446 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 63 "parser.mly"
                     (_2 :: _1)
# 454 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 66 "parser.mly"
                   ( Expr _1 )
# 461 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 67 "parser.mly"
                          ( Return(_2) )
# 468 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 5 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : 'stmt) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'stmt) in
    Obj.repr(
# 68 "parser.mly"
                                               ( If(_3, _5, _7) )
# 477 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'stmt) in
    Obj.repr(
# 69 "parser.mly"
                                        ( While(_3, _5) )
# 485 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'id_list) in
    Obj.repr(
# 70 "parser.mly"
                           ( VarDecl(_1, _2) )
# 493 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 74 "parser.mly"
       ( [_1] )
# 500 "parser.ml"
               : 'id_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'id_list) in
    Obj.repr(
# 75 "parser.mly"
                       ( _1 :: _3 )
# 508 "parser.ml"
               : 'id_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 78 "parser.mly"
           ( [_1] )
# 515 "parser.ml"
               : 'expr_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr_list) in
    Obj.repr(
# 79 "parser.mly"
                           ( _1 :: _3 )
# 523 "parser.ml"
               : 'expr_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 83 "parser.mly"
                                ( String(_1) )
# 530 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 84 "parser.mly"
                                ( Float(_1) )
# 537 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 85 "parser.mly"
                                ( Int(_1)  )
# 544 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 86 "parser.mly"
                                ( Bool(_1)  )
# 551 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 87 "parser.mly"
                                ( Id(_1) )
# 558 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr_list) in
    Obj.repr(
# 88 "parser.mly"
                                ( List(_1, _3) )
# 566 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 89 "parser.mly"
                         ( Binop(_1, Add,   _3) )
# 574 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 90 "parser.mly"
                         ( Binop(_1, Sub,   _3) )
# 582 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 91 "parser.mly"
                         ( Binop(_1, Mult,  _3) )
# 590 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 92 "parser.mly"
                         ( Binop(_1, Div,   _3) )
# 598 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 93 "parser.mly"
                         ( Binop(_1, Equal, _3) )
# 606 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 94 "parser.mly"
                         ( Binop(_1, Neq,   _3) )
# 614 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 95 "parser.mly"
                         ( Binop(_1, Less,  _3) )
# 622 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 96 "parser.mly"
                         ( Binop(_1, Leq,   _3) )
# 630 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 97 "parser.mly"
                         ( Binop(_1, Greater, _3) )
# 638 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 98 "parser.mly"
                         ( Binop(_1, Geq,   _3) )
# 646 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 99 "parser.mly"
                         ( Binop(_1, And,   _3) )
# 654 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 100 "parser.mly"
                         ( Binop(_1, Or,    _3) )
# 662 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 101 "parser.mly"
                         ( Unop(Neg, _2) )
# 669 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 102 "parser.mly"
                         ( Unop(Not, _2) )
# 676 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 103 "parser.mly"
                         ( Assign(_3, _1) )
# 684 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 104 "parser.mly"
                                ( Getn(_1, _3) )
# 692 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'args_opt) in
    Obj.repr(
# 105 "parser.mly"
                                ( Call(_1, _3) )
# 700 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 106 "parser.mly"
                                ( _2 )
# 707 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 109 "parser.mly"
    ( [] )
# 713 "parser.ml"
               : 'args_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'args_list) in
    Obj.repr(
# 110 "parser.mly"
                ( List.rev _1 )
# 720 "parser.ml"
               : 'args_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 113 "parser.mly"
         ( [_1] )
# 727 "parser.ml"
               : 'args_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'args_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 114 "parser.mly"
                           ( _3 :: _1 )
# 735 "parser.ml"
               : 'args_list))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.program)
