type token =
  | COMMA
  | LPAR
  | RPAR
  | LSQR
  | RSQR
  | IF
  | ELIF
  | ENDIF
  | ELSE
  | ENDFUN
  | NEWLINE
  | WHILE
  | ENDLOOP
  | BREAK
  | CONTINUE
  | TRUE
  | FALSE
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | MOD
  | EQ
  | NEQ
  | LEQ
  | GEQ
  | LT
  | GT
  | OR
  | AND
  | NOT
  | EOF
  | PIPE
  | INT
  | FLOAT
  | BOOL
  | STRING
  | RETURN
  | LSTR of (string)
  | ID of (string)
  | LFLT of (string)
  | LINT of (int)
  | LBOOL of (bool)

open Parsing;;
let _ = parse_error;;
# 2 "src/parser.mly"
open Ast
# 51 "src/parser.ml"
let yytransl_const = [|
  257 (* COMMA *);
  258 (* LPAR *);
  259 (* RPAR *);
  260 (* LSQR *);
  261 (* RSQR *);
  262 (* IF *);
  263 (* ELIF *);
  264 (* ENDIF *);
  265 (* ELSE *);
  266 (* ENDFUN *);
  267 (* NEWLINE *);
  268 (* WHILE *);
  269 (* ENDLOOP *);
  270 (* BREAK *);
  271 (* CONTINUE *);
  272 (* TRUE *);
  273 (* FALSE *);
  274 (* PLUS *);
  275 (* MINUS *);
  276 (* TIMES *);
  277 (* DIVIDE *);
  278 (* MOD *);
  279 (* EQ *);
  280 (* NEQ *);
  281 (* LEQ *);
  282 (* GEQ *);
  283 (* LT *);
  284 (* GT *);
  285 (* OR *);
  286 (* AND *);
  287 (* NOT *);
    0 (* EOF *);
  288 (* PIPE *);
  289 (* INT *);
  290 (* FLOAT *);
  291 (* BOOL *);
  292 (* STRING *);
  293 (* RETURN *);
    0|]

let yytransl_block = [|
  294 (* LSTR *);
  295 (* ID *);
  296 (* LFLT *);
  297 (* LINT *);
  298 (* LBOOL *);
    0|]

let yylhs = "\255\255\
\001\000\001\000\001\000\003\000\005\000\005\000\008\000\008\000\
\004\000\004\000\009\000\009\000\009\000\009\000\007\000\007\000\
\010\000\010\000\010\000\010\000\006\000\006\000\002\000\012\000\
\012\000\013\000\013\000\011\000\011\000\011\000\011\000\011\000\
\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
\011\000\011\000\011\000\014\000\014\000\015\000\015\000\000\000"

let yylen = "\002\000\
\000\000\002\000\002\000\008\000\000\000\001\000\002\000\004\000\
\001\000\003\000\001\000\001\000\001\000\001\000\000\000\002\000\
\002\000\003\000\008\000\006\000\000\000\002\000\003\000\001\000\
\003\000\001\000\003\000\001\000\001\000\001\000\001\000\001\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\002\000\002\000\003\000\
\004\000\004\000\003\000\000\000\001\000\001\000\003\000\002\000"

let yydefred = "\000\000\
\001\000\000\000\000\000\012\000\011\000\014\000\013\000\002\000\
\003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\023\000\010\000\000\000\025\000\000\000\000\000\006\000\000\000\
\021\000\000\000\000\000\008\000\022\000\000\000\000\000\000\000\
\000\000\000\000\004\000\000\000\000\000\000\000\000\000\028\000\
\000\000\029\000\030\000\031\000\016\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\017\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\051\000\000\000\
\033\000\000\000\000\000\018\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\048\000\027\000\000\000\000\000\
\050\000\000\000\049\000\000\000\000\000\000\000\000\000\020\000\
\000\000\019\000"

let yydgoto = "\002\000\
\003\000\008\000\009\000\021\000\022\000\027\000\031\000\023\000\
\011\000\045\000\046\000\013\000\049\000\078\000\079\000"

let yysindex = "\007\000\
\000\000\000\000\072\255\000\000\000\000\000\000\000\000\000\000\
\000\000\229\254\018\255\015\255\014\255\039\255\003\255\072\255\
\000\000\000\000\044\255\000\000\007\255\045\255\000\000\049\255\
\000\000\072\255\072\255\000\000\000\000\003\255\037\255\097\255\
\097\255\050\255\000\000\052\255\097\255\097\255\097\255\000\000\
\056\255\000\000\000\000\000\000\000\000\062\001\231\000\003\000\
\046\255\097\255\097\255\000\255\055\255\089\001\097\255\097\255\
\000\000\097\255\097\255\097\255\097\255\097\255\097\255\097\255\
\097\255\097\255\097\255\097\255\097\255\021\255\000\000\097\255\
\000\000\005\001\035\001\000\000\136\001\059\255\063\255\118\001\
\000\255\000\255\055\255\055\255\187\255\187\255\065\255\065\255\
\065\255\065\255\154\001\247\255\000\000\000\000\092\255\092\255\
\000\000\097\255\000\000\058\255\060\255\136\001\092\255\000\000\
\057\255\000\000"

let yyrindex = "\000\000\
\000\000\000\000\071\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\033\255\069\255\000\000\000\000\000\000\078\255\
\000\000\000\000\069\255\000\000\000\000\000\000\000\000\084\255\
\000\000\000\000\051\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\139\255\000\000\000\000\000\000\000\000\000\000\000\000\090\255\
\000\000\000\000\000\000\033\000\169\255\000\000\094\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\008\255\000\000\099\255\000\000\
\063\000\093\000\199\255\229\255\186\000\216\000\104\000\134\000\
\145\000\175\000\150\255\116\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\012\255\000\000\000\000\
\000\000\000\000"

let yygindex = "\000\000\
\000\000\073\000\000\000\011\000\000\000\000\000\000\000\077\000\
\000\000\163\255\224\255\094\000\038\000\000\000\000\000"

let yytablesize = 696
let yytable = "\047\000\
\048\000\100\000\101\000\056\000\052\000\053\000\054\000\001\000\
\054\000\105\000\054\000\012\000\055\000\010\000\055\000\015\000\
\016\000\074\000\075\000\060\000\061\000\014\000\077\000\080\000\
\017\000\081\000\082\000\083\000\084\000\085\000\086\000\087\000\
\088\000\089\000\090\000\091\000\092\000\030\000\032\000\048\000\
\033\000\019\000\034\000\018\000\015\000\024\000\035\000\025\000\
\036\000\026\000\073\000\050\000\015\000\051\000\015\000\037\000\
\015\000\055\000\056\000\093\000\015\000\097\000\015\000\098\000\
\106\000\102\000\103\000\038\000\056\000\015\000\056\000\009\000\
\104\000\039\000\040\000\041\000\042\000\043\000\044\000\024\000\
\005\000\015\000\058\000\059\000\060\000\061\000\007\000\015\000\
\015\000\015\000\015\000\015\000\015\000\032\000\026\000\033\000\
\052\000\034\000\032\000\029\000\033\000\053\000\028\000\036\000\
\004\000\005\000\006\000\007\000\020\000\094\000\037\000\000\000\
\000\000\000\000\000\000\037\000\044\000\000\000\044\000\000\000\
\044\000\000\000\038\000\000\000\000\000\000\000\044\000\038\000\
\039\000\040\000\041\000\042\000\043\000\044\000\040\000\041\000\
\042\000\043\000\044\000\032\000\000\000\032\000\032\000\032\000\
\044\000\044\000\000\000\044\000\000\000\032\000\045\000\000\000\
\045\000\000\000\045\000\000\000\032\000\032\000\032\000\032\000\
\045\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
\032\000\047\000\032\000\047\000\000\000\047\000\000\000\000\000\
\000\000\000\000\045\000\047\000\000\000\045\000\000\000\000\000\
\000\000\000\000\047\000\047\000\047\000\047\000\056\000\047\000\
\047\000\047\000\047\000\047\000\047\000\047\000\047\000\036\000\
\047\000\036\000\000\000\036\000\058\000\059\000\060\000\061\000\
\000\000\036\000\000\000\064\000\065\000\066\000\067\000\000\000\
\036\000\036\000\036\000\036\000\000\000\036\000\036\000\036\000\
\036\000\036\000\036\000\036\000\036\000\037\000\036\000\037\000\
\000\000\037\000\000\000\000\000\000\000\000\000\000\000\037\000\
\000\000\000\000\000\000\000\000\000\000\000\000\037\000\037\000\
\037\000\037\000\056\000\037\000\037\000\037\000\037\000\037\000\
\037\000\037\000\037\000\072\000\037\000\000\000\056\000\000\000\
\058\000\059\000\060\000\061\000\000\000\062\000\063\000\064\000\
\065\000\066\000\067\000\000\000\058\000\059\000\060\000\061\000\
\000\000\062\000\063\000\064\000\065\000\066\000\067\000\068\000\
\069\000\046\000\070\000\046\000\000\000\046\000\000\000\000\000\
\000\000\000\000\000\000\046\000\000\000\000\000\000\000\000\000\
\000\000\000\000\046\000\046\000\000\000\000\000\000\000\046\000\
\046\000\046\000\046\000\046\000\046\000\046\000\046\000\034\000\
\046\000\034\000\000\000\034\000\000\000\000\000\000\000\000\000\
\000\000\034\000\000\000\000\000\000\000\000\000\000\000\000\000\
\034\000\034\000\000\000\000\000\000\000\034\000\034\000\034\000\
\034\000\034\000\034\000\034\000\034\000\035\000\034\000\035\000\
\000\000\035\000\000\000\000\000\000\000\000\000\000\000\035\000\
\041\000\000\000\041\000\000\000\041\000\000\000\035\000\035\000\
\000\000\000\000\041\000\035\000\035\000\035\000\035\000\035\000\
\035\000\035\000\035\000\000\000\035\000\000\000\041\000\041\000\
\041\000\041\000\041\000\041\000\041\000\041\000\043\000\041\000\
\043\000\000\000\043\000\000\000\000\000\000\000\000\000\000\000\
\043\000\040\000\000\000\040\000\000\000\040\000\000\000\000\000\
\000\000\000\000\000\000\040\000\043\000\043\000\043\000\043\000\
\043\000\043\000\043\000\043\000\000\000\043\000\000\000\040\000\
\040\000\040\000\040\000\040\000\040\000\040\000\040\000\042\000\
\040\000\042\000\000\000\042\000\000\000\000\000\000\000\000\000\
\000\000\042\000\038\000\000\000\038\000\000\000\038\000\000\000\
\000\000\000\000\000\000\000\000\038\000\042\000\042\000\042\000\
\042\000\042\000\042\000\042\000\042\000\000\000\042\000\000\000\
\038\000\038\000\000\000\000\000\000\000\000\000\038\000\038\000\
\039\000\038\000\039\000\000\000\039\000\000\000\000\000\000\000\
\000\000\000\000\039\000\000\000\000\000\000\000\000\000\000\000\
\000\000\071\000\056\000\000\000\000\000\000\000\039\000\039\000\
\000\000\000\000\000\000\000\000\039\000\039\000\000\000\039\000\
\058\000\059\000\060\000\061\000\000\000\062\000\063\000\064\000\
\065\000\066\000\067\000\068\000\069\000\000\000\070\000\095\000\
\056\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\058\000\059\000\
\060\000\061\000\000\000\062\000\063\000\064\000\065\000\066\000\
\067\000\068\000\069\000\000\000\070\000\096\000\056\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\058\000\059\000\060\000\061\000\
\000\000\062\000\063\000\064\000\065\000\066\000\067\000\068\000\
\069\000\056\000\070\000\000\000\000\000\000\000\000\000\000\000\
\057\000\000\000\000\000\000\000\000\000\000\000\000\000\058\000\
\059\000\060\000\061\000\000\000\062\000\063\000\064\000\065\000\
\066\000\067\000\068\000\069\000\056\000\070\000\000\000\000\000\
\000\000\000\000\000\000\076\000\000\000\000\000\000\000\000\000\
\000\000\000\000\058\000\059\000\060\000\061\000\000\000\062\000\
\063\000\064\000\065\000\066\000\067\000\068\000\069\000\000\000\
\070\000\056\000\099\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\058\000\
\059\000\060\000\061\000\056\000\062\000\063\000\064\000\065\000\
\066\000\067\000\068\000\069\000\000\000\070\000\000\000\000\000\
\000\000\058\000\059\000\060\000\061\000\056\000\062\000\063\000\
\064\000\065\000\066\000\067\000\068\000\069\000\000\000\070\000\
\000\000\000\000\000\000\058\000\059\000\060\000\061\000\000\000\
\062\000\063\000\064\000\065\000\066\000\067\000\000\000\069\000"

let yycheck = "\032\000\
\033\000\095\000\096\000\004\001\037\000\038\000\039\000\001\000\
\001\001\103\000\003\001\039\001\001\001\003\000\003\001\001\001\
\002\001\050\000\051\000\020\001\021\001\004\001\055\000\056\000\
\011\001\058\000\059\000\060\000\061\000\062\000\063\000\064\000\
\065\000\066\000\067\000\068\000\069\000\027\000\002\001\072\000\
\004\001\039\001\006\001\005\001\001\001\039\001\010\001\003\001\
\012\001\001\001\005\001\002\001\002\001\002\001\004\001\019\001\
\006\001\002\001\004\001\039\001\010\001\003\001\012\001\001\001\
\008\001\098\000\009\001\031\001\004\001\019\001\000\000\039\001\
\013\001\037\001\038\001\039\001\040\001\041\001\042\001\011\001\
\003\001\031\001\018\001\019\001\020\001\021\001\003\001\037\001\
\038\001\039\001\040\001\041\001\042\001\002\001\005\001\004\001\
\003\001\006\001\002\001\027\000\004\001\003\001\026\000\012\001\
\033\001\034\001\035\001\036\001\015\000\072\000\019\001\255\255\
\255\255\255\255\255\255\019\001\001\001\255\255\003\001\255\255\
\005\001\255\255\031\001\255\255\255\255\255\255\011\001\031\001\
\037\001\038\001\039\001\040\001\041\001\042\001\038\001\039\001\
\040\001\041\001\042\001\001\001\255\255\003\001\004\001\005\001\
\029\001\030\001\255\255\032\001\255\255\011\001\001\001\255\255\
\003\001\255\255\005\001\255\255\018\001\019\001\020\001\021\001\
\011\001\023\001\024\001\025\001\026\001\027\001\028\001\029\001\
\030\001\001\001\032\001\003\001\255\255\005\001\255\255\255\255\
\255\255\255\255\029\001\011\001\255\255\032\001\255\255\255\255\
\255\255\255\255\018\001\019\001\020\001\021\001\004\001\023\001\
\024\001\025\001\026\001\027\001\028\001\029\001\030\001\001\001\
\032\001\003\001\255\255\005\001\018\001\019\001\020\001\021\001\
\255\255\011\001\255\255\025\001\026\001\027\001\028\001\255\255\
\018\001\019\001\020\001\021\001\255\255\023\001\024\001\025\001\
\026\001\027\001\028\001\029\001\030\001\001\001\032\001\003\001\
\255\255\005\001\255\255\255\255\255\255\255\255\255\255\011\001\
\255\255\255\255\255\255\255\255\255\255\255\255\018\001\019\001\
\020\001\021\001\004\001\023\001\024\001\025\001\026\001\027\001\
\028\001\029\001\030\001\001\001\032\001\255\255\004\001\255\255\
\018\001\019\001\020\001\021\001\255\255\023\001\024\001\025\001\
\026\001\027\001\028\001\255\255\018\001\019\001\020\001\021\001\
\255\255\023\001\024\001\025\001\026\001\027\001\028\001\029\001\
\030\001\001\001\032\001\003\001\255\255\005\001\255\255\255\255\
\255\255\255\255\255\255\011\001\255\255\255\255\255\255\255\255\
\255\255\255\255\018\001\019\001\255\255\255\255\255\255\023\001\
\024\001\025\001\026\001\027\001\028\001\029\001\030\001\001\001\
\032\001\003\001\255\255\005\001\255\255\255\255\255\255\255\255\
\255\255\011\001\255\255\255\255\255\255\255\255\255\255\255\255\
\018\001\019\001\255\255\255\255\255\255\023\001\024\001\025\001\
\026\001\027\001\028\001\029\001\030\001\001\001\032\001\003\001\
\255\255\005\001\255\255\255\255\255\255\255\255\255\255\011\001\
\001\001\255\255\003\001\255\255\005\001\255\255\018\001\019\001\
\255\255\255\255\011\001\023\001\024\001\025\001\026\001\027\001\
\028\001\029\001\030\001\255\255\032\001\255\255\023\001\024\001\
\025\001\026\001\027\001\028\001\029\001\030\001\001\001\032\001\
\003\001\255\255\005\001\255\255\255\255\255\255\255\255\255\255\
\011\001\001\001\255\255\003\001\255\255\005\001\255\255\255\255\
\255\255\255\255\255\255\011\001\023\001\024\001\025\001\026\001\
\027\001\028\001\029\001\030\001\255\255\032\001\255\255\023\001\
\024\001\025\001\026\001\027\001\028\001\029\001\030\001\001\001\
\032\001\003\001\255\255\005\001\255\255\255\255\255\255\255\255\
\255\255\011\001\001\001\255\255\003\001\255\255\005\001\255\255\
\255\255\255\255\255\255\255\255\011\001\023\001\024\001\025\001\
\026\001\027\001\028\001\029\001\030\001\255\255\032\001\255\255\
\023\001\024\001\255\255\255\255\255\255\255\255\029\001\030\001\
\001\001\032\001\003\001\255\255\005\001\255\255\255\255\255\255\
\255\255\255\255\011\001\255\255\255\255\255\255\255\255\255\255\
\255\255\003\001\004\001\255\255\255\255\255\255\023\001\024\001\
\255\255\255\255\255\255\255\255\029\001\030\001\255\255\032\001\
\018\001\019\001\020\001\021\001\255\255\023\001\024\001\025\001\
\026\001\027\001\028\001\029\001\030\001\255\255\032\001\003\001\
\004\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\018\001\019\001\
\020\001\021\001\255\255\023\001\024\001\025\001\026\001\027\001\
\028\001\029\001\030\001\255\255\032\001\003\001\004\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\018\001\019\001\020\001\021\001\
\255\255\023\001\024\001\025\001\026\001\027\001\028\001\029\001\
\030\001\004\001\032\001\255\255\255\255\255\255\255\255\255\255\
\011\001\255\255\255\255\255\255\255\255\255\255\255\255\018\001\
\019\001\020\001\021\001\255\255\023\001\024\001\025\001\026\001\
\027\001\028\001\029\001\030\001\004\001\032\001\255\255\255\255\
\255\255\255\255\255\255\011\001\255\255\255\255\255\255\255\255\
\255\255\255\255\018\001\019\001\020\001\021\001\255\255\023\001\
\024\001\025\001\026\001\027\001\028\001\029\001\030\001\255\255\
\032\001\004\001\005\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\018\001\
\019\001\020\001\021\001\004\001\023\001\024\001\025\001\026\001\
\027\001\028\001\029\001\030\001\255\255\032\001\255\255\255\255\
\255\255\018\001\019\001\020\001\021\001\004\001\023\001\024\001\
\025\001\026\001\027\001\028\001\029\001\030\001\255\255\032\001\
\255\255\255\255\255\255\018\001\019\001\020\001\021\001\255\255\
\023\001\024\001\025\001\026\001\027\001\028\001\255\255\030\001"

let yynames_const = "\
  COMMA\000\
  LPAR\000\
  RPAR\000\
  LSQR\000\
  RSQR\000\
  IF\000\
  ELIF\000\
  ENDIF\000\
  ELSE\000\
  ENDFUN\000\
  NEWLINE\000\
  WHILE\000\
  ENDLOOP\000\
  BREAK\000\
  CONTINUE\000\
  TRUE\000\
  FALSE\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIVIDE\000\
  MOD\000\
  EQ\000\
  NEQ\000\
  LEQ\000\
  GEQ\000\
  LT\000\
  GT\000\
  OR\000\
  AND\000\
  NOT\000\
  EOF\000\
  PIPE\000\
  INT\000\
  FLOAT\000\
  BOOL\000\
  STRING\000\
  RETURN\000\
  "

let yynames_block = "\
  LSTR\000\
  ID\000\
  LFLT\000\
  LINT\000\
  LBOOL\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    Obj.repr(
# 35 "src/parser.mly"
    ( [], [] )
# 409 "src/parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Ast.program) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 36 "src/parser.mly"
                       ( (_2 :: fst _1), snd _1 )
# 417 "src/parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Ast.program) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'fdecl) in
    Obj.repr(
# 37 "src/parser.mly"
                       ( fst _1, (_2 :: snd _1) )
# 425 "src/parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : 'TYPE) in
    let _2 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'param) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'vdecl_list) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 42 "src/parser.mly"
    ( { ftyp = _1;
        fname = _2;
        params = _4;
        body = List.rev _6 } )
# 439 "src/parser.ml"
               : 'fdecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 48 "src/parser.mly"
                    ( [] )
# 445 "src/parser.ml"
               : 'param))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'param_list) in
    Obj.repr(
# 49 "src/parser.mly"
                    ( _1 )
# 452 "src/parser.ml"
               : 'param))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'TYPE) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 52 "src/parser.mly"
                                 ([(_1, _2)])
# 460 "src/parser.ml"
               : 'param_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'TYPE) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'param_list) in
    Obj.repr(
# 53 "src/parser.mly"
                                 ((_1, _2) :: _4)
# 469 "src/parser.ml"
               : 'param_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'basic_type) in
    Obj.repr(
# 56 "src/parser.mly"
                        ( _1 )
# 476 "src/parser.ml"
               : 'TYPE))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'basic_type) in
    Obj.repr(
# 57 "src/parser.mly"
                                ( List(_1))
# 483 "src/parser.ml"
               : 'TYPE))
; (fun __caml_parser_env ->
    Obj.repr(
# 60 "src/parser.mly"
                        ( Float )
# 489 "src/parser.ml"
               : 'basic_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 61 "src/parser.mly"
                        ( Int)
# 495 "src/parser.ml"
               : 'basic_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 62 "src/parser.mly"
                        ( String )
# 501 "src/parser.ml"
               : 'basic_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 63 "src/parser.mly"
                        ( Bool )
# 507 "src/parser.ml"
               : 'basic_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 70 "src/parser.mly"
    ([])
# 513 "src/parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 71 "src/parser.mly"
                     (_2 :: _1)
# 521 "src/parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 74 "src/parser.mly"
                                                ( Expr _1 )
# 528 "src/parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 75 "src/parser.mly"
                                                ( Return(_2) )
# 535 "src/parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 5 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : 'stmt) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'stmt) in
    Obj.repr(
# 76 "src/parser.mly"
                                                ( If(_3, _5, _7) )
# 544 "src/parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'stmt) in
    Obj.repr(
# 77 "src/parser.mly"
                                                ( While(_3, _5) )
# 552 "src/parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 81 "src/parser.mly"
                     ( [] )
# 558 "src/parser.ml"
               : 'vdecl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'vdecl_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 82 "src/parser.mly"
                       ( _2 :: _1 )
# 566 "src/parser.ml"
               : 'vdecl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'TYPE) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'id_list) in
    Obj.repr(
# 85 "src/parser.mly"
                         ( Vdecl(_1, _2, Noexpr) )
# 574 "src/parser.ml"
               : 'vdecl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 89 "src/parser.mly"
       ( [_1] )
# 581 "src/parser.ml"
               : 'id_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'id_list) in
    Obj.repr(
# 90 "src/parser.mly"
                       ( _1 :: _3 )
# 589 "src/parser.ml"
               : 'id_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 93 "src/parser.mly"
           ( [_1] )
# 596 "src/parser.ml"
               : 'expr_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr_list) in
    Obj.repr(
# 94 "src/parser.mly"
                           ( _1 :: _3 )
# 604 "src/parser.ml"
               : 'expr_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 98 "src/parser.mly"
                                ( Lstring(_1) )
# 611 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 99 "src/parser.mly"
                                ( Lfloat(_1) )
# 618 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 100 "src/parser.mly"
                                ( Lint(_1) )
# 625 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 101 "src/parser.mly"
                                 ( Lbool(_1) )
# 632 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 102 "src/parser.mly"
                                ( Id(_1) )
# 639 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr_list) in
    Obj.repr(
# 103 "src/parser.mly"
                                ( Llist(_2) )
# 646 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 104 "src/parser.mly"
                         ( Binop(_1, Add,   _3) )
# 654 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 105 "src/parser.mly"
                         ( Binop(_1, Sub,   _3) )
# 662 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 106 "src/parser.mly"
                         ( Binop(_1, Mult,  _3) )
# 670 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 107 "src/parser.mly"
                         ( Binop(_1, Div,   _3) )
# 678 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 108 "src/parser.mly"
                         ( Binop(_1, Equal, _3) )
# 686 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 109 "src/parser.mly"
                         ( Binop(_1, Neq,   _3) )
# 694 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 110 "src/parser.mly"
                         ( Binop(_1, Less,  _3) )
# 702 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 111 "src/parser.mly"
                         ( Binop(_1, Leq,   _3) )
# 710 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 112 "src/parser.mly"
                         ( Binop(_1, Greater, _3) )
# 718 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 113 "src/parser.mly"
                         ( Binop(_1, Geq,   _3) )
# 726 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 114 "src/parser.mly"
                         ( Binop(_1, And,   _3) )
# 734 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 115 "src/parser.mly"
                         ( Binop(_1, Or,    _3) )
# 742 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 116 "src/parser.mly"
                         ( Unop(Neg, _2) )
# 749 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 117 "src/parser.mly"
                         ( Unop(Not, _2) )
# 756 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 118 "src/parser.mly"
                         ( Assign(_3, _1) )
# 764 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 119 "src/parser.mly"
                                ( Getn(_1, _3) )
# 772 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'args_opt) in
    Obj.repr(
# 120 "src/parser.mly"
                                ( Call(_1, _3) )
# 780 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 121 "src/parser.mly"
                                ( _2 )
# 787 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 124 "src/parser.mly"
    ( [] )
# 793 "src/parser.ml"
               : 'args_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'args_list) in
    Obj.repr(
# 125 "src/parser.mly"
                ( List.rev _1 )
# 800 "src/parser.ml"
               : 'args_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 128 "src/parser.mly"
         ( [_1] )
# 807 "src/parser.ml"
               : 'args_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'args_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 129 "src/parser.mly"
                           ( _3 :: _1 )
# 815 "src/parser.ml"
               : 'args_list))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.program)
